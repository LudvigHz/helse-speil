name: master

on:
  push:
    branches:
      - master
env:
  APP: speil
  TEAM: tbd
  IMAGE: docker.pkg.github.com/${{ github.repository }}/speil
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - uses: actions/checkout@v1
        name: Checkout code
      - name: Cache node deps
        id: cache-node
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: install deps
        run: npm install
      - name: build client
        run: npm run build
      - name: build server
        run: npm run build-server
      - name: run e2e-test
        run: npm run e2e-test
      - name: Archive Cypress artifacts
        uses: actions/upload-artifact@v1
        with:
          name: videos
          path: e2e-tests/cypress/videos
      - name: create docker tag
        run: echo ::set-env name=TAG::$(echo ${{ github.sha }} | cut -c1-7)
      - name: build docker image
        run: |
          rm -rf node_modules && npm install --only=production
          docker build . --pull -t ${{ env.IMAGE }}:${{ env.TAG }}
      - name: push docker image
        run: |
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${{ env.IMAGE }}:${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: deploy to dev
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          ENVIRONMENT: dev-fss
          RESOURCE: deploy/dev.yml deploy/alerts-dev.yml deploy/redis.yml
          WAIT: false
          VAR: "image=${{env.IMAGE}},tag=${{env.TAG}},team=${{env.TEAM}},app=${{env.APP}}"
      - name: deploy to prod
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          ENVIRONMENT: prod-fss
          RESOURCE: deploy/prod.yml deploy/alerts-prod.yml deploy/redis.yml
          WAIT: false
          VAR: "image=${{env.IMAGE}},tag=${{env.TAG}},team=${{env.TEAM}},app=${{env.APP}}"
